/*
Copyright (c) 2020 LHW - createskyblue
Arduino-Pomodoro is licensed under Mulan PSL v2.
You can use this software according to the terms and conditions of the Mulan PSL v2.
You may obtain a copy of Mulan PSL v2 at:
         http://license.coscl.org.cn/MulanPSL2
THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
See the Mulan PSL v2 for more details.

光电门下位机程序版本:
V1.0
*/
#include <U8g2lib.h>
U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* clock=*/ PB6, /* data=*/ PB7, /* reset=*/ U8X8_PIN_NONE);
int DATA[2][8]; //目标传感器|历史数据
bool TriggerTimer = false;
bool State[2] = {1, 1}; //传感器状态
int grap[2][16]; //图形缓冲区
byte GrapX;
int DataDeal[2][2]; //目标传感器|累加&去抖均值
unsigned long timestamp[2][3]; //目标传感器|电平突变起始&电平突变结束&突变维持时间
unsigned long deltaT; //A,B传感器从起始到结束的时间差
unsigned long GrapSampling; //波形捕获时间戳
#define SysVersion 1.0
#define MutationThreshold 150
#define SamplingRate 10
byte io[2] = {0, 1};
byte a = 0;
int LightIntensity = 0;
// width: 128, height: 64
const unsigned char Logo2[] PROGMEM = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0x9d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x9d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xb3, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xb9, 0x9d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xbc, 0x9d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xbe, 0x9d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xbc, 0x9d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xb9, 0x9d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xb3, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xf9, 0x0f, 0x00, 0xfe, 0xf3, 0xe7, 0xe1, 0x3f, 0xff, 0xe4, 0xbc, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xcf, 0x7f, 0x06, 0xe7, 0xe7, 0xc9, 0x3f, 0xff, 0x49, 0xbe, 0xfd, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x0c, 0x00, 0x26, 0xff, 0x07, 0xc9, 0x3f, 0xff, 0x3f, 0xbf, 0xfd, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xcc, 0x79, 0x26, 0x00, 0xe7, 0xf9, 0x3f, 0x3f, 0x00, 0xb0, 0xfd, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xcc, 0x79, 0x86, 0xf9, 0xe7, 0x81, 0x3f, 0x3f, 0xff, 0xb3, 0xfd, 0xff, 0xff, 0xff, 0x9f, 0x80, 0x4c, 0x40, 0x86, 0xf9, 0x67, 0xf8, 0x00, 0x00, 0xff, 0xb3, 0xfd, 0xff, 0xff, 0xff, 0x9f, 0x9c, 0xcc, 0x79, 0x26, 0x81, 0x01, 0xc9, 0x3f, 0xff, 0x00, 0xbe, 0xfd, 0xff, 0xff, 0xff, 0x9f, 0x9c, 0xcc, 0x61, 0x26, 0x99, 0x39, 0xc9, 0x3f, 0xff, 0x3f, 0xbf, 0xfd, 0xff, 0xff, 0xff, 0x9f, 0x9c, 0xcc, 0x49, 0x26, 0x99, 0x39, 0xe1, 0x3f, 0xff, 0x8f, 0xbf, 0xfd, 0xff, 0xff, 0xff, 0x9f, 0x80, 0x0c, 0x00, 0x26, 0x99, 0x39, 0xe1, 0x3f, 0x3f, 0x00, 0xb0, 0xfd, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xcc, 0x7f, 0x86, 0x99, 0x39, 0x93, 0x3f, 0xff, 0xcf, 0xbf, 0xfd, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xcc, 0x7f, 0xe6, 0x9c, 0x01, 0x81, 0x3f, 0xff, 0xcf, 0xbf, 0xfd, 0xff, 0xff, 0xff, 0x9f, 0xff, 0x0c, 0x00, 0xe6, 0x9c, 0x39, 0x8c, 0x3f, 0xff, 0xcf, 0xbf, 0xfd, 0xff, 0xff, 0xff, 0x9f, 0x3f, 0xcc, 0x7f, 0x66, 0xc6, 0x7f, 0x9e, 0x01, 0xe0, 0xc3, 0xbf, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xfd, 0xff, 0xff, 0xfc, 0x7f, 0xce, 0x9f, 0xcf, 0xff, 0xf9, 0x7f, 0xfe, 0x3f, 0xe7, 0xff, 0xbf, 0x7d, 0x00, 0xf8, 0xfc, 0x7f, 0xce, 0x3f, 0xcf, 0xff, 0xf0, 0xff, 0xfc, 0x67, 0x66, 0x10, 0xb8, 0xfd, 0xff, 0xf9, 0xfc, 0x7f, 0x02, 0xfc, 0xcf, 0x7f, 0xe6, 0x07, 0x80, 0x67, 0xe6, 0x93, 0xb9, 0xfd, 0xff, 0x19, 0x00, 0x78, 0xcc, 0x0c, 0xce, 0x3f, 0xcf, 0xff, 0xfc, 0xcf, 0xf3, 0x93, 0xb9, 0xfd, 0xf9, 0xf9, 0x84, 0x19, 0xc8, 0x7c, 0xce, 0x9f, 0x9f, 0xff, 0xfc, 0xcf, 0x73, 0x10, 0xb8, 0xfd, 0xf3, 0xf9, 0x84, 0x19, 0xce, 0x3c, 0x01, 0x06, 0x00, 0xfe, 0xfc, 0x9f, 0x79, 0x7e, 0xbe, 0xfd, 0x33, 0xf9, 0x84, 0x19, 0xce, 0x3c, 0xcf, 0xff, 0xff, 0xff, 0xfc, 0x9f, 0x79, 0x0e, 0xb0, 0xfd, 0x8f, 0xf9, 0x84, 0x79, 0x00, 0x18, 0xce, 0xff, 0xff, 0x0f, 0xc0, 0x3f, 0x7c, 0x4e, 0xb2, 0xfd, 0xe3, 0x79, 0x86, 0x79, 0x0e, 0x0f, 0xcc, 0x0f, 0x00, 0xff, 0xfc, 0x7f, 0x7e, 0x40, 0xb2, 0xfd, 0xf8, 0x79, 0x86, 0x79, 0x0e, 0x3f, 0xcf, 0xff, 0xfc, 0xff, 0xfc, 0x3f, 0xfc, 0x03, 0xb0, 0x3d, 0xfe, 0x79, 0x86, 0x79, 0x66, 0x3e, 0xcf, 0x7f, 0xe6, 0xff, 0xfc, 0x9f, 0xf9, 0x73, 0xbe, 0xfd, 0xff, 0x39, 0x07, 0x78, 0x66, 0x3e, 0xcf, 0x3f, 0xcf, 0xff, 0xfc, 0xcf, 0xf3, 0x73, 0xb2, 0xfd, 0xff, 0x3c, 0x87, 0x79, 0xf2, 0x3c, 0xcf, 0x1f, 0x80, 0xff, 0xfc, 0xe7, 0xe7, 0x03, 0xa0, 0xfd, 0x3f, 0x9e, 0xf1, 0x7f, 0xf8, 0x39, 0x00, 0xfc, 0x9f, 0x03, 0x00, 0xf1, 0x8f, 0xf8, 0xa7, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x1d, 0x00, 0xfc, 0x9f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x9d, 0xff, 0xfc, 0x9f, 0x7f, 0x06, 0xfe, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x1d, 0x00, 0x1c, 0x00, 0x7c, 0x66, 0xfe, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x9d, 0xf3, 0xfc, 0x9c, 0xfc, 0x67, 0xfe, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x9d, 0xf3, 0x7c, 0x00, 0xf8, 0x67, 0xfe, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x9d, 0x80, 0x7c, 0x9e, 0x1c, 0xf2, 0xf8, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x9d, 0xf3, 0x3c, 0x03, 0x7c, 0xf8, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x9d, 0xc3, 0x3c, 0x9c, 0x7f, 0x02, 0xfc, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x9d, 0x93, 0xfc, 0x00, 0x7c, 0xe6, 0xfc, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x1d, 0x00, 0x3c, 0x9c, 0x7f, 0x66, 0xfe, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x9d, 0xff, 0x7c, 0x00, 0x78, 0x08, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x9d, 0xff, 0x7c, 0x9e, 0x7f, 0x9c, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x1d, 0x00, 0x3c, 0x9c, 0x7f, 0x06, 0xfe, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x9d, 0xff, 0x9c, 0x01, 0xf8, 0xf1, 0xf8, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };
void setup() {
  Serial.begin(115200);
  u8g2.begin();
  u8g2.setFont(u8g2_font_6x13_tf);
  u8g2.setFontDirection(0);
  u8g2.setCursor(0, 12);
  u8g2.print(">_ booting");
  u8g2.setCursor(0, 24);
  u8g2.sendBuffer();
  delay(200);
  u8g2.print("F/W:  ");
  u8g2.print(SysVersion);
  u8g2.setCursor(0, 36);
  u8g2.print("Auto white balance");
  u8g2.setCursor(0, 63);
  u8g2.print("LHW - createskyblue");
  u8g2.sendBuffer();
  delay(200);
  LightIntensity = 0.9 * ((analogRead(0) + analogRead(1)) / 2);
  u8g2.drawXBMP(0, 0, 128, 64, Logo2);
  u8g2.sendBuffer();
  delay(1500);
  GUI(false);
}

void loop() {
  collect();
  MakeGrap();
  SerialOutPut();

}
void SerialOutPut() {
  Serial.println((4096 - LightIntensity) + String(",") + DataDeal[0][1] + String(",") + DataDeal[1][1]);
}
void collect() {
  int IoALeng = sizeof(io) / sizeof(io[0]);
  bool Trigger = false;
  for (byte Iio = 0; Iio < IoALeng; Iio++) {
    //进行数据移位
    DataDeal[Iio][0] = 0; //移位前把历史累加数据清零
    for (int i = 0; i < 8 - 1; i++) {
      DATA[Iio][i + 1] = DATA[Iio][i];
      DataDeal[Iio][0] += DATA[Iio][i];
      /*
         0 | 1 | 2 |
         ----------------
         A | B | C |  原来
         A | A | B |  位移后
         D | A | C |  写入数据
      */
    }
    //写入新的传感器数据
    DATA[Iio][0] = analogRead(io[Iio]) - LightIntensity;
    DataDeal[Iio][0] += DATA[Iio][0];
    DataDeal[Iio][1] = DataDeal[Iio][0] / 8.0; //计算均值
    //记录电平突变时间戳
    Trigger = false;
    //Serial.println(String("当前：") + DATA[Iio][0] + String("大于阈值：") + (DataDeal[Iio][1] + MutationThreshold)+String("小于阈值：") + (DataDeal[Iio][1] - MutationThreshold));
    /*
       旧版本可以动态调整检测速率，但是动态调整范围比较窄

      if (DATA[Iio][0] > DataDeal[Iio][1] + MutationThreshold) {
      timestamp[Iio][0] = millis();
      State[Iio] = 0;
      //Serial.println(Iio + String("-触发电平突变起始 当前：") + DATA[Iio][0] + String("大于阈值：") + (DataDeal[Iio][1] + MutationThreshold));
      }
      if (DATA[Iio][0] < DataDeal[Iio][1] - MutationThreshold && millis() > timestamp[Iio][0]) {
      timestamp[Iio][1] = millis();
      Trigger = true;
      State[Iio] = 1;
      }
    */
    //这个为固定阈值版本，无法动态调整，但是效率比较高
    if (DataDeal[Iio][1] > 0.5 * (4096 - LightIntensity) && State[Iio] == 1) {
      timestamp[Iio][0] = millis();
      State[Iio] = 0;
      //Serial.println(timestamp[1][0]+String(" , ")+timestamp[1][1]);
      //Serial.println(Iio + String("-触发电平突变起始 当前：") + DATA[Iio][0] + String("大于阈值：") + (DataDeal[Iio][1] + MutationThreshold));
    }
    if (DataDeal[Iio][1] < 0.35 * (4096 - LightIntensity) && millis() > timestamp[Iio][0] && State[Iio] == 0) {
      timestamp[Iio][1] = millis();
      Trigger = true;
      State[Iio] = 1;
      //Serial.println(timestamp[1][0]+String(" , ")+timestamp[1][1]);
    }
    if (Trigger) {
      timestamp[Iio][2] = timestamp[Iio][1] - timestamp[Iio][0];
      if (TriggerTimer) {
        if (timestamp[1][1] > timestamp[0][0]) {
          deltaT = timestamp[1][1] - timestamp[0][0];
          GUI(true);
        } else GUI(false);
        //Serial.println(Iio + String("-突变起始时间") + timestamp[Iio][0] + String("-突变结束时间") + timestamp[Iio][1] + String("-突变维持时间") + timestamp[Iio][2]);
        Trigger = false;
      }
      if (State[0] = 1) TriggerTimer = !TriggerTimer;
    }
  }
}
void MakeGrap() {
  if (!State[0] && State[1] && GrapX > 8) {
    GrapX = 0;
    for (byte i = 0; i < 128; i++) {
      grap[0][i] = 0;
      grap[1][i] = 0;
    }
  }
  if (GrapX < 16 && GrapSampling + SamplingRate < millis()) {
    grap[0][GrapX] = map(DataDeal[0][1], 0, 4095 - LightIntensity, 0, 31);
    grap[1][GrapX] = map(DataDeal[1][1], 0, 4095 - LightIntensity, 0, 31);
    GrapX++;
    GrapSampling = millis();
  }

}
void GUI(bool order) {
  u8g2.clearBuffer();
  u8g2.setCursor(0, 12);
  u8g2.print("A ");
  u8g2.print(timestamp[0][2]);
  u8g2.print(" ms");
  u8g2.setCursor(64, 12);
  u8g2.print("B ");
  u8g2.print(timestamp[1][2]);
  u8g2.print(" ms");
  u8g2.setCursor(0, 24);
  if (order) {
    u8g2.print("Diff-> ");
    u8g2.print(deltaT);
    Serial.println(deltaT);
    u8g2.print(" ms");
  } else u8g2.print("A first and B last");
  //绘制实时曲线
  for (int i = 0; i < 16; i++) {
    u8g2.drawLine(8 * i, 63 - grap[0][i], 8 * (i + 1), 63 - grap[0][i + 1]);
    u8g2.drawLine(8 * i, 63 - grap[1][i], 8 * (i + 1), 63 - grap[1][i + 1]);
  }
  u8g2.sendBuffer();
}
